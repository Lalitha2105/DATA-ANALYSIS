# -*- coding: utf-8 -*-
"""DAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1atValjgh0E5U0nvYRhSpwePe1PX2c6kz
"""





a[10][10],b[10][10],c[10][10]
m=int(input("enter m"))
n=int(input("enter n"))
for(int i=0;i<m;i++)
{
    for(int j=0;j<n;j++)
    {
        print("%d",&a[i][j])
    }
}
for(int i=0;i<m;i++)
{
    for(int j=0;j<n;j++)
    {
        print("%d",&b[i][j])
    }
}
for(int i=0;i<m;i++)
{
    for(int j=0;j<n;j++)
    {
        c[i][j]=a[i][j]+b[i][j]
        print("%d",c[i][j])
    }
}

import numpy as np
#creating an array
arr=np.array([1,2,3,4,5])
print(arr)
zeros_arr=np.zeros((3,3),dtype=int)
print(zeros_arr)
ones_arr=np.ones((2,2),dtype=int)
print(ones_arr)
arange_arr=np.arange(10)
print(arange_arr)
#array manipulation
reshaped_arr=arr.reshape(5,1)
print(reshaped_arr)
sliced_arr=arr[2:4]
print(sliced_arr)
a1=np.array([1,2,3,4])
b1=np.array([6,7,8,9])
c=np.vstack(a1+b1)
print(c)
c1=np.stack(a1+b1)
print(c1)
a1=np.array([1,2,3,4,5,6,7,8,9])
b=np.split(a1,3)
print(b)

a1=np.array([[1,2,3,4],[5,6,7,8]])
#transpose
c=a1.T
print(c)

#liear algebra with numpy
#to seperate 2d matrix-size of matrix is 2*2
a=np.array([[1,2],[3,4]])
b=np.array([[5,6],[7,8]])
c=np.dot(a,b)
print(c)
d=np.linalg.eig(c)
print(d)

import numpy as np
a=np.array([[1,2,3],[4,5,6]])
a1=np.array([[6,7,8],[1,5,9]])
c=np.sum(a+a1)
print(c)
b=np.sum(a)
print(b)
c1=np.sum(a,axis=0)#column add
d1=np.sum(a,axis=1)#row add
print(c1)
print(d1)



a1=np.array([1,2,3,4])
a2=np.array([6,7,8,9])
a3=(a1+a2)
print(a3)
a4=np.array(3)+a1
print(a4)
#broadcasting in numpy
b=a1+3
print(b)

#statistical algebra
#mean,median,varience,standard deviation
a=np.array([1,2,3,4,5])
b=np.mean(a)
print(b)
c=np.median(a)
print(c)
d=np.var(a)
print(d)
e=np.std(a)
print(e)



#data set
a=np.loadtxt("/content/adv.txt",dtype=int)
a=np.savetxt("/content/adv1.txt",a)
print(a)

import matplotlib.pyplot as plt
a=np.array([1,2,3,4])
plt.plot(a)
#centimental analysis

import pandas as pd
a=["jwalitha","ramya","durga",'vasanthi','dhana','swathi','swapna']
r=pd.Series(a,index=[67,43,44,89,34,45,23])
print(r)
#S

from google.colab import drive
drive.mount('/content/drive')



df=pd.read_csv("/sample1.txt",sep=" ")
print(df)

import pandas as pd
df=pd.read_csv("/content/csv file (1).zip")
#print(df)
#print(df.loc[1])
#print(df.loc[2:5])
#head()-enables us to display first specified lines data
#tail()-enables us to display last specified lines data
#df.head(5)
df.shape
df1=df.tail(10)
df2=df.head(10)
a=pd.concat([df1,df2],axis=0)
print(a)
#to convert into a csv file
a.to_csv("b.csv")
print(a.groupby(['ref'])['review_date'].count())

df=pd.read_excel("/Historicalinvesttemp.xlsx")
print(df)

df=pd.read_excel("/samplemean.xlsx")
print(df)
mv=df['sem'].mean()
df=df.fillna(mv)
print(mv)
#duplicates
df1=df.drop_duplicates()
print(df1)

df=pd.read_excel("/content/duplicates.xlsx")
print(df)
df.shape
df=df.drop_duplicates()
print(df)

import pandas as pd
df=pd.read_csv("/content/csv file (1).zip")
print(df)
df.shape

import numpy as np
import matplotlib.pyplot as plt
runs=np.array([100,50,91,78,89,25,34,19,9,10])
w=np.array([1,0,2,0,3,7,8,9,7,5])
plt.scatter(runs,w,color='orange')
plt.title('IndvsAus_score')
plt.show()

tigar=np.linspace(-2*np.pi,2*np.pi,50)
print(tigar)
plt.scatter(tigar,np.sin(tigar),color='black')
plt.title("sin(x)")
plt.show()

overs=np.arange(5,50,5)#creating x
overs_a=np.arange(5,30,5)
runs_i=np.array([25,51,84,131,160,189,220,250,267])#creating y
runs_a=np.array([15,41,94,110,151])
wickets=np.array([12,32,96])
plt.plot(overs,runs_i,color='blue',label='india')#ploting
plt.plot(overs_a,runs_a,color='yellow',label='Aus')
plt.legend(loc='best')
plt.show()

a=[230,560,780,127,128]
b=[200,160,270,127,400]
years=[1,2,3,4]
profit_a=[(a[i]-a[i-1]) for i in range(1,len(a))]
profit_b=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,2)
plt.plot(years,profit_a,color='hotpink',linewidth='3',label='CompanyA',marker='*',ms='5',mec='m')
plt.subplot(2,1,1)
plt.plot(years,profit_b,color='black',linestyle='dotted',label='CompanyB',marker='H')

a=np.array([25,60,5,10])
labe=["AIML","Python","Pandas","Numpy"]
plt.pie(a,labels=labe)
plt.show()

a=np.array([25,60,5,10])
labe=["AIML","Python","Pandas","Numpy"]
explo=[0.2,0.5,0,0]
colours=["blue","red","purple","yellow"]
plt.title("PIE CHART")
plt.pie(a,colors=colours,labels=labe,explode=explo,startangle=35,textprops={'fontsize':10,'fontweight':'bold'})#startangle=angle of rotation of piechart
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
dv=pd.read_excel("/content/temperature_calculate.xlsx")
print(dv)
avg_temp=dv["temperature"].mean()
print("the average recorded temperature is",avg_temp)
minimum_temp=dv["temperature"].min()
print("the minimum temperature is ",minimum_temp)
maximum_temp=dv["temperature"].max()
print("the maximum temperature is ",maximum_temp)
threshold=26
high_temp_days=dv[dv["temperature"]>threshold].shape[0]
print("number of days with high temperature than threshold temperature",high_temp_days)
plt.title("TEMPERATURE REPORT(IN Â°C)")
plt.plot(dv['day'],dv['temperature'],color='black')
plt.xlabel("day")
plt.ylabel("temperature")

import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("tips")
#sns.scatterplot(x="total_bill",y="tip",data=tips)
sns.violinplot(x="total_bill",y="tip",data=tips)
plt.title("Scatter plot of total bill vs. Tip")
plt.xlabel("Total Bill ($)")
plt.ylabel("Tip($)")
plt.show()



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
attention=sns.load_dataset("attention")
attention.head(10)
sns.scatterplot(x="subject",y="score",data=attention)
plt.title("Scatter plot of subject vs score")
plt.xlabel("subject")
plt.ylabel("score")
plt.show()

flights=sns.load_dataset("flights")
flights.head(10)
sns.scatterplot(x="month",y="passengers",data=flights)
plt.title("Scatter plot of month vs passengers")
plt.xlabel("month")
plt.ylabel("passengers")
plt.show()

iris=sns.load_dataset("iris")
print(iris)
correlation_matrix=iris.corr()
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("correlation Heatmap of Iris Dataset")
plt.show()

diamonds=sns.load_dataset("diamonds")
print(diamonds)
correlation_matrix=diamonds.corr()
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("correlation Heatmap of diamonds Dataset")
plt.show()

